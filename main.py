from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
import sqlite3 as sq
import telebot
from os import getenv
import requests
from urllib.parse import quote
import json

bot = telebot.TeleBot(getenv('BOT_TOKEN'))
lastMessage = None
first_api_headers = {
    "accept": "application/json",
    "X-API-KEY": getenv('API_TOKEN')
}

second_api_headers = {
    "accept": "application/json",
    "X-API-KEY": getenv('X_API_KEY')
}

''' –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é '''
def get_data(name):
    url = f"https://api.kinopoisk.dev/v1.4/movie/search?page=1&limit=1&query={quote(name)}"
    data = json.loads(requests.get(url, headers=first_api_headers).text)

    try:
        data = data['docs'][0]
        json_data = {
            'id': data['id'],
            'name': data['name'],
            'alternativeName': data['alternativeName'],
            'countries': data['countries'],
            'year': data['year'],
            'genres': data['genres'],
            'description': data['shortDescription'],
            'poster': data['poster']['previewUrl']
        }
        return json_data
    except Exception as e:
        return str(e)
    

''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '''
@bot.message_handler(commands=['start'])
def start(message: Message):
    with sq.connect('db/database.db') as con: 
        cur = con.cursor()
        cur.execute('INSERT INTO users (user_id, user_name, user_surname, username) VALUES (?, ?, ?, ?) ON CONFLICT (user_id) DO NOTHING',
                    (message.from_user.id, message.from_user.first_name, message.from_user.last_name, message.from_user.username))
        con.commit()
    bot.send_message( message.chat.id, '–®–º–µ–±—å—é–ª–æ–∫ üëã' )


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help '''
@bot.message_handler(commands=['help'])
def start(message: Message):
    text = 'üçÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üçÑ\n/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–≥–æ–¥] - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≥–æ–¥—É\n/add - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–∑ –ø–æ–∏—Å–∫–∞\n/all - –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Ñ–∏–ª—å–º—ã\n–ê –µ—â–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —Å—Ä–∞–∑—É, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.'
    bot.send_message( message.chat.id, text)


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞] –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–∞—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
    –∏–ª–∏ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∏–ª—å–º–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Ñ. text_searching() '''
@bot.message_handler(commands=['add'])
def add_item(message):  
    global lastMessage

    if len(message.text) <= 5:  # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ text_searching()
        try:
            json_data = get_data(lastMessage)
        except TypeError:
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.')
    elif len(message.text) >= 5:    # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ –∫–æ–º–∞–Ω–¥—ã /add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–≥–æ–¥]
        name = message.text.split(' ', 1)[1]
        try:
            json_data = get_data(name)
        except IndexError:
            bot.reply_to(message, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞.')
        except Exception as e:
            bot.reply_to(message, f'–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ. ‚ùå\n\n{str(e)}')
    try:
        with sq.connect('db/database.db') as con:   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            cur = con.cursor()
            cur.execute("INSERT INTO items (ru_name, alternative_name, year, genres, id_user) VALUES (?, ?, ?, ?, ?) ON CONFLICT (ru_name) DO NOTHING", 
                        (json_data['name'], json_data['alternativeName'], json_data['year'], json.dumps(json_data['genres'], ensure_ascii=False), message.from_user.id))
            con.commit()
    except Exception as e:
        return
    bot.reply_to(message, f'–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ')


old_message_id = None
''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /all –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ '''
@bot.message_handler(commands=['all'])
def get_movies_info(message: Message):
    global old_message_id
    old_message_id = message.message_id

    try:
        with sq.connect('db/database.db') as con: 
            cur = con.cursor()
            cur.execute(f'SELECT ru_name FROM items WHERE id_user = {message.from_user.id}')
            results = [res[0] for res in cur.fetchall()]
        if not results:
            bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞ ü§ó')
            return
        markup = InlineKeyboardMarkup()     # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        for result in results:
            btn = InlineKeyboardButton(result, callback_data=f'action_{result}')
            markup.add(btn)

        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ñ–∏–ª—å–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π ü§ó', reply_markup=markup)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ó\n{str(e)}')


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '''
@bot.callback_query_handler(func=lambda call: call.data.startswith('action_'))
def handle_movies_actions(call: CallbackQuery):
    global old_message_id
    selected_movie = call.data.split('_')[1:]
    selected_movie = '_'.join(selected_movie)

    json_data = get_data(selected_movie)
    countries = [ country['name'] for country in json_data['countries'] ]
    genres = [ name['name'] for name in json_data['genres'] ]

    lnk = f'—Å–º–æ—Ç—Ä–µ—Ç—å%20{json_data["name"].replace(" ", "%20")}%20{json_data["year"]}%20–æ–Ω–ª–∞–π–Ω'

    markup = InlineKeyboardMarkup()
    btn_google = InlineKeyboardButton(text='Google', url=f'https://www.google.com/search?q={lnk}')
    btn_yandex = InlineKeyboardButton(text='–Ø–Ω–¥–µ–∫—Å', url=f'https://yandex.ru/search/?text={lnk}')
    btn_delete = InlineKeyboardButton(text='üçÑ –®–º–µ–±—å—é–ª–æ–∫ üçÑ',  callback_data=f'delete_{selected_movie}')

    markup.add(btn_google, btn_yandex)
    markup.add(btn_delete)

    if call.message.message_id != old_message_id:   # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.send_photo(call.message.chat.id, photo=json_data['poster'],
                       caption=f"{json_data['name']} ({json_data['alternativeName']})\n\n{', '.join(countries)}, {json_data['year']}\n\n{', '.join(genres)}\n\n{json_data['description']}",
                       reply_markup=markup)
        old_message_id = call.message.message_id    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    else:
        bot.edit_message_media(chat_id=call.message.chat.id, message_id=call.message.message_id + 1,
                               media=InputMediaPhoto(json_data['poster'], 
                               caption=f"{json_data['name']} ({json_data['alternativeName']})\n\n{', '.join(countries)}, {json_data['year']}\n\n{', '.join(genres)}\n\n{json_data['description']}"), 
                               reply_markup=markup)
        

''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '''
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_movies_delete(call: CallbackQuery):
    selected_movie = call.data.split('_')[1:]
    selected_movie = '_'.join(selected_movie)

    with sq.connect('db/database.db') as con:
        cur = con.cursor()
        cur.execute(f'DELETE FROM items WHERE ru_name = ? and id_user = ?', (selected_movie, call.from_user.id))
        con.commit()

    bot.send_message(call.message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–µ–ª —à–º–µ–±—å—é–ª–æ–∫, —Ñ–∏–ª—å–º –±—ã–ª —É–¥–∞–ª–µ–Ω üçÑ')


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–µ–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ id '''
@bot.message_handler(commands=['similar'])
def similar_by_id(message: Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ id
    name = message.text.split(' ', 1)[1]
    json_data = get_data(name)
    
    id = json_data['id']
    try:    # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–µ–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ id
        url = f"https://kinopoiskapiunofficial.tech/api/v2.2/films/{id}/similars"
        data = json.loads(requests.get(url, headers=second_api_headers).text)
        print(data)
        data = data['items'][0]
        json_data = {
            'name': data['nameRu'],
            'alternativeName': data['nameEn'],
            'poster': data['posterUrlPreview']
        }
    except Exception as e:
        bot.send_message(message.chat.id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ó\n{str(e)}')

    markup = InlineKeyboardMarkup()
    lnk = f'—Å–º–æ—Ç—Ä–µ—Ç—å%20{json_data["name"].replace(" ", "%20")}%20–æ–Ω–ª–∞–π–Ω'
    btn_google = InlineKeyboardButton(text='Google', url=f'https://www.google.com/search?q={lnk}')
    btn_yandex = InlineKeyboardButton(text='–Ø–Ω–¥–µ–∫—Å', url=f'https://yandex.ru/search/?text={lnk}')
    markup.add(btn_google, btn_yandex)

    bot.send_photo(message.chat.id, photo=json_data['poster'], 
                   caption=f"{json_data['name']} ({json_data['alternativeName']})",
                   reply_markup=markup)


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞ '''
@bot.message_handler(content_types='text')
def text_searching(message: Message):
    global lastMessage

    json_data = get_data(message.text)
    countries = [ country['name'] for country in json_data['countries'] ]
    genres = [ name['name'] for name in json_data['genres'] ]
    lastMessage = message.text

    markup = InlineKeyboardMarkup()
    lnk = f'—Å–º–æ—Ç—Ä–µ—Ç—å%20{json_data["name"].replace(" ", "%20")}%20{json_data["year"]}%20–æ–Ω–ª–∞–π–Ω'
    btn_google = InlineKeyboardButton(text='Google', url=f'https://www.google.com/search?q={lnk}')
    btn_yandex = InlineKeyboardButton(text='–Ø–Ω–¥–µ–∫—Å', url=f'https://yandex.ru/search/?text={lnk}')
    btn_add = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'add_{json_data["id"]}')
    markup.add(btn_google, btn_yandex)
    markup.add(btn_add)

    bot.send_photo(message.chat.id, photo=json_data['poster'], 
                   caption=f"{json_data['name']} ({json_data['alternativeName']})\n\n{', '.join(countries)}, {json_data['year']}\n\n{', '.join(genres)}\n\n{json_data['description']}",
                   reply_markup=markup)


''' –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞ –ø–æ –∫–Ω–æ–ø–∫–µ '''
@bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
def handle_movies_delete(call: CallbackQuery):
    json_data = get_data(lastMessage)
    try:
        with sq.connect('db/database.db') as con:   # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            cur = con.cursor()
            cur.execute(f"INSERT INTO items (ru_name, alternative_name, year, genres, id_user) VALUES (?, ?, ?, ?, ?)", 
                        (json_data['name'], json_data['alternativeName'], json_data['year'], json.dumps(json_data['genres'], ensure_ascii=False), call.from_user.id))
            con.commit()
    except Exception as e:
        return
    bot.send_message(call.message.chat.id, f'–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ')


if __name__ == '__main__':
    bot.infinity_polling()